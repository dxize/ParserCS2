import asyncio
from aiogram import Bot, types
from aiogram.filters import Command
from aiogram import Router, Dispatcher
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties

from ParserMarketCSGOSkinov import MarketCSGO  
from ParserSteamSkinov import Steam_data  

API_TOKEN = "YOUR_API_TOKEN"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
bot = Bot(
    token=API_TOKEN,
    session=AiohttpSession(),
    default=DefaultBotProperties(parse_mode="HTML"),
)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitoring_task = None
monitoring_task_running = False


@router.message(Command("start"))
async def start(message: types.Message):
    global monitoring_task, monitoring_task_running
    if not monitoring_task_running:
        monitoring_task_running = True
        await message.answer("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω...")
        monitoring_task = asyncio.create_task(price_monitoring(message))
    else:
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")


@router.message(Command("stop"))
async def stop(message: types.Message):
    global monitoring_task, monitoring_task_running
    if monitoring_task_running:
        monitoring_task_running = False
        monitoring_task.cancel()
        await message.answer("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω...")
        try:
            await monitoring_task
        except asyncio.CancelledError:
            print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
    else:
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")


async def price_monitoring(message: types.Message):
    item_index = 0
    current_page = 1
    while monitoring_task_running:
        try:
            result = MarketCSGO(current_page, item_index)
            if result is None:
                await message.answer("–ù–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
                break

            (
                item_name,
                item_price_MarketCSGO,
                item_link,
                current_page,
                item_index,
                item_image,
            ) = result
            if item_name is not None:
                item_price_Steam = Steam_data(item_name)
                print(item_name)
                print(item_price_MarketCSGO, item_price_Steam)
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ü–µ–Ω—ã –Ω–µ None
                if item_price_Steam is not None and item_price_MarketCSGO is not None:
                    checking_the_profit = (
                        (item_price_Steam * 0.87 - item_price_MarketCSGO)
                        / item_price_MarketCSGO
                        * 100
                    )

                    print(
                        item_name,
                        item_price_Steam,
                        checking_the_profit,
                    )
                    checking_the_profit = int(checking_the_profit * 100) / 100
                    if checking_the_profit >= 15:
                        response_text = (
                            f"<b>{item_name}</b>\n\n"
                            f"üõí <b>CSGO-Market Price:</b> ${item_price_MarketCSGO}\n\n"
                            f"üí∏ <b>Steam Price:</b> ${item_price_Steam}\n\n"
                            f"üìà <b>Profit:</b> {checking_the_profit}%\n\n"
                            f"üîó <b>Links: </b><a href='{item_link}'>CSGO-Market</a> ,  <a href='https://steamcommunity.com/market/listings/730/{item_name}'>Steam</a>"
                        )
                        await bot.send_photo(
                            message.chat.id, item_image, caption=response_text
                        )
                    else:
                        print("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
                else:
                    print("–¶–µ–Ω—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
            else:
                await asyncio.sleep(
                    10
                )  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        except asyncio.CancelledError:
            print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
            break
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(
                10
            )  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    dp = Dispatcher()
    dp.include_router(router)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏ –∑–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    await bot.delete_webhook()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
